//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/input systems/telescopeNavigation.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TelescopeNavigation : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TelescopeNavigation()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""telescopeNavigation"",
    ""maps"": [
        {
            ""name"": ""releaseButton"",
            ""id"": ""472535fa-f968-430d-9ba2-7b2b5996270a"",
            ""actions"": [
                {
                    ""name"": ""Release"",
                    ""type"": ""Button"",
                    ""id"": ""1771aae1-c287-4307-8bf7-978980864123"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Hold"",
                    ""type"": ""Button"",
                    ""id"": ""aedc2878-c89f-4aeb-8439-54099b2f82be"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8a3d9d18-148d-47f4-a199-459218c3466a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Release"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f123dd2-dd46-4441-8b6d-7031712f988d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // releaseButton
        m_releaseButton = asset.FindActionMap("releaseButton", throwIfNotFound: true);
        m_releaseButton_Release = m_releaseButton.FindAction("Release", throwIfNotFound: true);
        m_releaseButton_Hold = m_releaseButton.FindAction("Hold", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // releaseButton
    private readonly InputActionMap m_releaseButton;
    private IReleaseButtonActions m_ReleaseButtonActionsCallbackInterface;
    private readonly InputAction m_releaseButton_Release;
    private readonly InputAction m_releaseButton_Hold;
    public struct ReleaseButtonActions
    {
        private @TelescopeNavigation m_Wrapper;
        public ReleaseButtonActions(@TelescopeNavigation wrapper) { m_Wrapper = wrapper; }
        public InputAction @Release => m_Wrapper.m_releaseButton_Release;
        public InputAction @Hold => m_Wrapper.m_releaseButton_Hold;
        public InputActionMap Get() { return m_Wrapper.m_releaseButton; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ReleaseButtonActions set) { return set.Get(); }
        public void SetCallbacks(IReleaseButtonActions instance)
        {
            if (m_Wrapper.m_ReleaseButtonActionsCallbackInterface != null)
            {
                @Release.started -= m_Wrapper.m_ReleaseButtonActionsCallbackInterface.OnRelease;
                @Release.performed -= m_Wrapper.m_ReleaseButtonActionsCallbackInterface.OnRelease;
                @Release.canceled -= m_Wrapper.m_ReleaseButtonActionsCallbackInterface.OnRelease;
                @Hold.started -= m_Wrapper.m_ReleaseButtonActionsCallbackInterface.OnHold;
                @Hold.performed -= m_Wrapper.m_ReleaseButtonActionsCallbackInterface.OnHold;
                @Hold.canceled -= m_Wrapper.m_ReleaseButtonActionsCallbackInterface.OnHold;
            }
            m_Wrapper.m_ReleaseButtonActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Release.started += instance.OnRelease;
                @Release.performed += instance.OnRelease;
                @Release.canceled += instance.OnRelease;
                @Hold.started += instance.OnHold;
                @Hold.performed += instance.OnHold;
                @Hold.canceled += instance.OnHold;
            }
        }
    }
    public ReleaseButtonActions @releaseButton => new ReleaseButtonActions(this);
    public interface IReleaseButtonActions
    {
        void OnRelease(InputAction.CallbackContext context);
        void OnHold(InputAction.CallbackContext context);
    }
}
